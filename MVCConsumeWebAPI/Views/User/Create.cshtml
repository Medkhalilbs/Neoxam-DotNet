@model MVCConsumeWebAPI.Models.User

@{
    ViewBag.Title = "Ajouter un utilisateur";
}
@*<script src="http://maps.google.com/maps/api/js?key=AIzaSyAjsIpyXFoB7_5_E2DgO_-CTDMHKM0cW4I" type="text/javascript"></script>*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAmRhS_8PPn4ZZ8vxss5jn9F1_IO1Xy6No&libraries=places" type="text/javascript"></script>
@*<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">

<h2>Ajouter un utilisateur</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <h4>Role</h4>
        @(Html.Kendo().DropDownList()
          .Name("role")
          .HtmlAttributes(new { style = "width: 29%" })
          .DataTextField("userRole")
          .DataValueField("userRole")
          .Events(e => e.Change("change"))

            .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetUserDrownDownList", "User");
              });
          })
          .Height(250)
          .HeaderTemplate("<div class=\"dropdown-header k-widget k-header\">" +
                        "<span>Icon</span>" +
                        "<span>Role et authorisation</span>" +
                    "</div>")
          .FooterTemplate("<strong>#: instance.dataSource.total() #</strong> Roles trouvé")
          .Template("<span class=\"k-state-default\" style=\"background-image: url(" + Url.Content("~/Content/web/Pictures/") + "#:data.userPicture#" + ");\" ></span>" +
                    "<span class=\"k-state-default\"><h3>#: data.userRole #</h3><p>#: data.userAuthorizations #</p></span>")
          .ValueTemplate("<span class=\"selected-value\" style=\"background-image: url(" + Url.Content("~/Content/web/Pictures/") + "#:data.userPicture#" + ");\" ></span>" + "<span>#:data.userRole#</span>")
        )







        <div class="employee box"></div>


        <div>

            <div class="form-group">
                @Html.Label("Adresse email", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    <div class="input-group" style="width:18%">
                        <div class="input-group-addon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        @Html.TextBoxFor(model => model.email, new { style = "width:20%", placeholder = "email@yahoo.fr", @class = "form-control"  })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                    </div>

                  
                    @*@Html.EditorFor(model => model.email, new { placeholder = "uneAdresseEmail@yahoo.fr" ,htmlAttributes = new { @class = "form-control"} })*@
                    
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Nom d'utilisateur ( Login )", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.login, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.login, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Mot de passe", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Confirmez mot de passe", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.confirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.confirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>


        <div class="admin box" style="padding-left: 2px;">
            <div class="form-group">
                @Html.Label("Nom", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.first_name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.first_name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Prenom", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.last_name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.last_name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("CIN", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.cin, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.cin, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Numero mobile", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.phone_number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.phone_number, "", new { @class = "text-danger" })
                </div>
            </div>

        <div>
            <h4>Addresse</h4> <input type="text" "form-control" id="txtPlace" placeholder="Indiquez un lieu" />
        </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("N° Maison", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.house_number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.house_number, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Rue", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.street, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Ville", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Pay", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.country, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Etat", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-1" style=" display: inline-block;">
                @Html.Label("zipCode", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.zipCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.zipCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Latitude", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Editor("lat", new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group" style=" display: inline-block;">
                @Html.Label("Langitude", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Editor("lng", new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div id="dvMap" style="width:100%; height: 500px"></div>


            @*<div class="form-group">
                @Html.LabelFor(model => model.picture, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.picture, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.picture, "", new { @class = "text-danger" })
                </div>
            </div>*@

            @(Html.Kendo().Upload().Multiple(false)
            .Name("files")
            .Async(a => a.Save("Async_Save", "User").Remove("Async_Remove", "User").SaveField("files").AutoUpload(true))
            .HtmlAttributes(new { aria_label = "files" })
            .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
            )



         @*@(Html.Kendo().Upload()
    .Name("files-jpg")
    .Async(a => a
        .Save("Validation_Save", "Upload")
        .Remove("Validation_Remove", "Upload")
        .SaveField("files").AutoUpload(true)
    )
    .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))

        )*@


        </div>










        <div class="candidate box" style="padding-left: 100px;">
            <div class="form-group">
                @Html.Label("Permis de conduire", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DriverLience, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DriverLience, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Validité Profile", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProfilValide)
                        @Html.ValidationMessageFor(model => model.ProfilValide, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("État social", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SocialState, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SocialState, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                </div>
            </div>
        </div>



        <script type="text/javascript">

            var myMap;
            var map;
            var markers = [];

            var mapOptions = {
                center: new google.maps.LatLng(36.898935, 10.190087),
                zoom: 14,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);

            //**************************************************************************MARKERS


            // This event listener will call addMarker() when the map is clicked.
            map.addListener('click', function (event) {
                deleteMarkers();
                addMarker(event.latLng);
            });



            // Adds a marker to the map and push to the array.
            function addMarker(location) {
                console.log("location=" + location);
                var NewMarker = new google.maps.Marker({
                    position: location,
                    map: map
                });
                markers.push(NewMarker);
            }

            // Sets the map on all markers in the array.
            function setMapOnAll(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }

            // Removes the markers from the map, but keeps them in the array.
            function clearMarkers() {
                setMapOnAll(null);
            }

            // Shows any markers currently in the array.
            function showMarkers() {
                setMapOnAll(map);
            }

            // Deletes all markers in the array by removing references to them.
            function deleteMarkers() {
                clearMarkers();
                markers = [];
            }
            //**************************************************************************MARKERS

            function extractFromAdress(components, type) {
                return components.filter((component) => component.types.indexOf(type) === 0).map((item) => item.long_name).pop() || null;
            }

            window.onload = function () {
           


       




            google.maps.event.addListener(map, 'click', function (e) {
                var data = JSON.stringify({ 'Lat': e.latLng.lat(), 'Lng': e.latLng.lng() });
                var latitude = e.latLng.lat();
                var longitude = e.latLng.lng();
                $.ajax({
                    type: "POST",
                    url: "/User/GoogleMapLngLatJsonPost",
                    data: data,
                    contentType: 'application/json',
                    success: function (data) {
                        var geocoder = geocoder = new google.maps.Geocoder();
                        geocoder.geocode({ 'latLng': e.latLng }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[0]) {



                                    var address = results[0].formatted_address;
                                    if (results[0].address_components[results[0].address_components.length - 1] != null)
                                        var pin = results[0].address_components[results[0].address_components.length - 1].long_name;
                                    if (results[0].address_components[results[0].address_components.length - 2] != null)
                                        var country = results[0].address_components[results[0].address_components.length - 2].long_name;
                                    if (results[0].address_components[results[0].address_components.length - 3] != null)
                                        var state = results[0].address_components[results[0].address_components.length - 3].long_name;
                                    if (results[0].address_components[results[0].address_components.length - 4] != null)
                                        var city = results[0].address_components[results[0].address_components.length - 4].long_name;

                                    var street=extractFromAdress(results[0].address_components, "route");
                                    var house_number = extractFromAdress(results[0].address_components, "street_number");

                                    document.getElementById('lat').value = results[0].geometry.location.lat();
                                    document.getElementById('lng').value = results[0].geometry.location.lng();

                                    document.getElementById('house_number').value = house_number;
                                    document.getElementById('street').value = street;
                                    document.getElementById('country').value = country;
                                    document.getElementById('state').value = state;
                                    document.getElementById('city').value = city;
                                    document.getElementById('zipCode').value = pin;
                                }
                            }
                        });
                    }
                });

            });
        }


            google.maps.event.addDomListener(window, 'load', function () {
        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlace'));
        google.maps.event.addListener(places, 'place_changed', function () {
            var place = places.getPlace();
            var address = place.formatted_address;
            
            deleteMarkers();
            addMarker(place.geometry.location);


            var latitude = place.geometry.location.lat();
            var longitude = place.geometry.location.lng();
            var latlng = new google.maps.LatLng(latitude, longitude);
            map.panTo(latlng);
            var geocoder = geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        console.log(latlng);
                        var address = results[0].formatted_address;

                        if (results[0].address_components[results[0].address_components.length - 1]!=null)
                            var pin = results[0].address_components[results[0].address_components.length - 1].long_name;
                        if (results[0].address_components[results[0].address_components.length - 2] != null)
                            var country = results[0].address_components[results[0].address_components.length - 2].long_name;
                        if (results[0].address_components[results[0].address_components.length - 3] != null)
                            var state = results[0].address_components[results[0].address_components.length - 3].long_name;
                        if (results[0].address_components[results[0].address_components.length - 4] != null)
                            var city = results[0].address_components[results[0].address_components.length - 4].long_name;

                        var street = extractFromAdress(results[0].address_components, "route");
                        var house_number = extractFromAdress(results[0].address_components, "street_number");

                        document.getElementById('lat').value = latitude;
                        document.getElementById('lng').value = longitude;

                        document.getElementById('house_number').value = house_number;
                        document.getElementById('street').value = street;
                        document.getElementById('country').value = country;
                        document.getElementById('state').value = state;
                        document.getElementById('city').value = city;
                        document.getElementById('zipCode').value = pin;
                    }
                }
            });
        });
    });
        </script>





            @(Html.Kendo().DropDownList()
          .Name("status")
          .HtmlAttributes(new { style = "width: 10%" })
          .DataTextField("Text")
          .DataValueField("Value")
          .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                  Text = "En attente",
                  Value = "pending"
              },
              new SelectListItem() {
                  Text = "Active",
                  Value = "active"
              },
              new SelectListItem() {
                  Text = "Bloqué",
                  Value = "blocked"
              }})
              .Value("pending"))


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Ajouter" class="btn btn-default" style="float: right;" />
                </div>
            </div>
        </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>



<style>
    .dropdown-header {
        border-width: 0 0 1px 0;
        text-transform: uppercase;
    }

        .dropdown-header > span {
            display: inline-block;
            padding: 10px;
        }

            .dropdown-header > span:first-child {
                width: 50px;
            }

    .selected-value {
        display: inline-block;
        vertical-align: middle;
        width: 24px;
        height: 24px;
        background-size: 100%;
        margin-right: 5px;
        border-radius: 50%;
    }

    #role-list .k-item {
        line-height: 1em;
        min-width: 300px;
    }

    /* Material Theme padding adjustment*/

    .k-material #role-list .k-item,
    .k-material #role-list .k-item.k-state-hover,
    .k-materialblack #role-list .k-item,
    .k-materialblack #role-list .k-item.k-state-hover {
        padding-left: 5px;
        border-left: 0;
    }

    #role-list .k-item > span {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        display: inline-block;
        vertical-align: top;
        margin: 20px 10px 10px 5px;
    }

        #role-list .k-item > span:first-child {
            -moz-box-shadow: inset 0 0 30px rgba(0,0,0,.3);
            -webkit-box-shadow: inset 0 0 30px rgba(0,0,0,.3);
            box-shadow: inset 0 0 30px rgba(0,0,0,.3);
            margin: 10px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-size: 100%;
            background-repeat: no-repeat;
        }

    #role-list h3 {
        font-size: 1.2em;
        font-weight: normal;
        margin: 0 0 1px 0;
        padding: 0;
    }

    #role-list p {
        margin: 0;
        padding: 0;
        font-size: .8em;
    }
</style>

<script>
            $(document).ready(function () {
                $(".box").hide();
            });

    function change() {
        var value = $("#role").val();


        if (value == "Utilisateur") {
            $(".box").hide();
        }
        if (value == "Administrateur") {
            $(".box").hide();
            $(".admin").show();
        }
        if (value == "Candidat") {
            $(".box").hide();
            $(".candidate").show();
        }
        if (value == "Employé") {
            $(".box").hide();
            $(".employee").show();
        }


    };
</script>


@*<script type="text/javascript">
(function ($) {
$.validator.setDefaults({
onkeyup: function (element) {
    if ($(element).attr('data-val-remote-url'))
    { return false;}
    else 
    {
        
            $(element).validateQ; 
            return $(element).valid();
    }
    }
})
}(jQuery));
</script>*@

