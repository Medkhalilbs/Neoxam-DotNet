@model IEnumerable<MVCConsumeWebAPI.Models.AdministratorRead>

@{
    ViewBag.Title = "Index";
}



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAmRhS_8PPn4ZZ8vxss5jn9F1_IO1Xy6No&libraries=places,geometry" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.1/underscore-min.js" type="text/javascript"></script>
<style type="text/css">
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            display: none;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider,
    input[type="checkbox"]:checked + .slider {
        background-color: #2196F3;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:focus + input[type="hidden"] + .slider,
    input[type="checkbox"]:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    /* include generated hidden field here */
    input[type="checkbox"]:checked + input[type="hidden"] + .slider:before,
    input[type="checkbox"]:checked + .slider:before {
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round2 {
        border-radius: 20px;
    }

        .slider.round2:before {
            border-radius: 50%;
        }
</style>
<style>
    #mask {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        margin: auto;
        visibility: hidden;
        z-index: -2;
        background: #000;
        background: rgba(0,0,0,0.8);
        overflow: hidden;
        opacity: 0;
        transition: all .5s ease-in-out;
    }

        #mask.showing {
            opacity: 1;
            z-index: 9000;
            visibility: visible;
            overflow: auto;
            transition: all .5s ease-in-out;
        }

    #boxes {
        display: table;
        width: 100%;
        height: 100%;
    }

    .window {
        max-width: 1200px;
        z-index: 9999;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: auto;
        background-color: #ffffff;
        font-family: 'Segoe UI Light', sans-serif;
        font-size: 15pt;
    }

        .window img {
            width: 100%;
            height: auto;
        }

    .inner {
        display: table-cell;
        vertical-align: middle;
    }

    #popupfoot {
        font-size: 16pt;
    }

    .showImage {
        margin: 0 0 3em;
        display: table;
        text-align: center;
    }

        .showImage img {
            display: block;
        }
</style>

@(Html.Kendo().Grid<MVCConsumeWebAPI.Models.AdministratorRead>()
    .Name("grid")
    .Columns(columns =>
    {
    columns.Bound(e => e.id).Width(40).Title("ID");
    columns.Bound(e => e.role).Width(120).Title("Role");
    columns.Bound(e => e.email).Width(180).Title("Email");
    columns.Bound(e => e.login).Width(120).Title("Login");
    columns.Bound(e => e.registration_date).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de creation du compte").Width(200);
    columns.Bound(e => e.status).Width(120).ClientTemplate("#=templateFunction(status)#").Title("Etat");


    columns.Template(@<text></text>).ClientTemplate(
"<a class='btn btn-info glyphicon glyphicon-trash' href='" + Url.Action("Details", "User") + "/#= id #'" + "><i class='ti-settings m-r-5 m-l-5'></i> Detail </a>" +
"<a class='btn btn-success glyphicon glyphicon-pencil' href='" + Url.Action("Edit", "User") + "/#= id #'" + "> <i class='ti-settings m-r-5 m-l-5'></i> Modifier</a>" +
        //"<a class='btn btn-danger glyphicon glyphicon-trash' href='" + Url.Action("Delete", "User") + "/#= id #'" + "><i class='ti-settings m-r-5 m-l-5'></i> Supprimer </a>" +



        //@Html.ActionLink("Modifier", "Edit", new { id = "#= id #" }) +
        //@Html.ActionLink("Details", "Details", new { id = "#= id #" }) +
        @Ajax.ActionLink(" Supprimer", "Delete", new { id = "#= id #" }, new AjaxOptions { Confirm = "Are you sure you want to delete this entry?", HttpMethod = "DELETE", OnSuccess = "RemoveRow" }, new { @class = "btn btn-danger glyphicon glyphicon-trash" })

).Title("Action").Width(320);

        //  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);



    })
    //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditPopUp"))
    .Sortable()
    .Pageable()
    .Scrollable()
    .ClientDetailTemplateId("template")
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Read(read => read.Action("UserListe", "User"))
        .Model(model => model.Id(p => p.id))
        .Update(update => update.Action("EditUser", "User"))
        .Destroy(destroy => destroy.Action("DeleteUser", "User"))


    )
    .Events(events => events.DataBound("dataBound"))
)



<div>
    <h4>Addresse</h4> 
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("N° Maison", htmlAttributes: new { @class = "control-label col-md-12" })
    <div class="col-md-4">
        @Html.Editor("house_number", new { htmlAttributes = new { @class = "form-control" } })

    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Rue", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("street", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Ville", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("city", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Pay", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("country", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Etat", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("state", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group col-md-1" style=" display: inline-block;">
    @Html.Label("zipCode", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Editor("zipCode", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Latitude", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
    @Html.Editor("lat", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>

<div class="form-group" style=" display: inline-block;">
    @Html.Label("Langitude", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
    @Html.Editor("lng", new { htmlAttributes = new { @class = "form-control" } })
    </div>
</div>



<div >
    <input type="text" id="clusterNumber_input" placeholder="Nombre des clusters">

    @(Html.Kendo().DropDownList()
          .Name("typeAlgorithme")
          .HtmlAttributes(new { style = "width: 15%" })
          .DataTextField("Text")
          .DataValueField("Value")
          //.Events(e => e.Change("change"))
          .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                  Text = "Single",
                  Value = "Single"
              },
              new SelectListItem() {
                  Text = "Complete",
                  Value = "Complete"
              },

              new SelectListItem() {
                  Text = "UPGMA",
                  Value = "UPGMA"
              },

              new SelectListItem() {
                  Text = "WPGMA",
                  Value = "WPGMA"
              },

              new SelectListItem() {
                  Text = "UPGMC",
                  Value = "UPGMC"
              },

              new SelectListItem() {
                  Text = "WPGMC",
                  Value = "WPGMC"
              },
              new SelectListItem() {
                  Text = "Ward",
                  Value = "Ward"
              }})
              .Value("Ward"))


    Activer/Desactiver itinéraire:
    <label class="switch" style="margin-bottom: 0px; vertical-align:middle; display:table-cell;display: inline-block;">
        @Html.CheckBox("pathOnOff")
        <div class="slider round2 style="display: inline-block;">
        </div>
    </label>
    
    <div>
        <input type="text" id="vwidth" placeholder="Resolution verticale">
        x
        <input type="text" id="vheight" placeholder="Resolution horizontale">

        <div class="imagesBlock"> 
            <a class="showImage">
                Preview
            </a>  
        </div>
        <div id="mask">
            <div id="boxes">
                <div class="inner">
                    <div id="dialog" class="window">
                        <a href="#" class="close">CLOSE</a>
                        <input type="button" value="Plein ecran" onclick="window.open('http://localhost:18080/gestion-resources-humaine-web/uploads/Plot.png');">
                        <div id="popupfoot"> <img src="#" class="image" alt="Loading..."></img> </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    </div>

<div id="dvMap" style="width:100%; height: 500px"></div>
<div id="directions-panel"></div>







<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=id#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Log de connexion").Content(@<text>
        @(Html.Kendo().Grid<MVCConsumeWebAPI.Models.User_log>()
                        .Name("grid_#=id#") // template expression, to be evaluated in the master context
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.id).Title("ID").Width(40);
                            columns.Bound(o => o.country).Title("Pay").Width(100);
                            columns.Bound(o => o.ip_address).Width(150).Title("IP Adresse");
                            columns.Bound(o => o.login_timestamp).Width(160).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de connexion"); // escaped template expression, to be evaluated in the child/detail context
                            columns.Bound(o => o.logout_timestamp).Width(160).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de déconnexion");
                            columns.Bound(o => o.pc_id).Width(150).Title("ID PC");
                            columns.Bound(o => o.session_id).Width(300).Title("SessionID");
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Read(read => read.Action("User_logsBinding", "User", new { id = "#=id#" }))
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
                </text>
                );
                items.Add().Text("Informations utilisateur").Content(
    "<div class='employee-details'>" +
        "<ul>" +
            "<li><label>Nom:</label>#= first_name #</li>" +
            "<li><label>Prenom:</label>#= last_name #</li>" +
            "<li><label>CIN:</label>#= cin #</li>" +
            "<li><label>Tel:</label>#= phone_number #</li>" +
             "<li><label>Pay:</label>#= address!=null ? address.addressLine1 +', '+ address.addressLine2+', '+ address.city+', '+ address.state+', '+ address.zipCode+', '+ address.country :'' #</li>" +
             "<li><label>Image:</label><img src='http://localhost:18080/gestion-resources-humaine-web/uploads/#= picture #' ) width='150' /></li>" +
        "</ul>" +
    "</div>"
);
            })
            .ToClientTemplate())
</script>



<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>

<style>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>

@section scripts{ @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")}
<script type="text/javascript">
    function RemoveRow() {
        var $tr = $(this).closest('tr');
        $tr.remove();
    }

    function templateFunction(item) {


        if(item=="pending")        
            return "<span class='label label-info'>En attente</span>";
        if(item=="active")
            return  "<span class='label label-success'>Activé</span>";
        if(item=="blocked")
            return  "<span class='label label-danger'>Bloqué</span>";
        
        return item;
    }
</script>


<script type="text/javascript">

            var myMap;
            var directionsService = new google.maps.DirectionsService;
            var directionsDisplay = new google.maps.DirectionsRenderer;

            function extractFromAdress(components, type) {
                return components.filter((component) => component.types.indexOf(type) === 0).map((item) => item.long_name).pop() || null;
            }

        window.onload = function () {
            var mapOptions = {
                center: new google.maps.LatLng(36.898935, 10.190087),
                zoom: 14,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var infoWindow = new google.maps.InfoWindow();
            var latlngbounds = new google.maps.LatLngBounds();
            var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
            myMap = map;
            directionsDisplay.setMap(map);
//**************************************************************************MARKERS
            var markers = [];

            // This event listener will call addMarker() when the map is clicked.
            map.addListener('click', function (event) {
                //deleteMarkers();
                addMarker(event.latLng);
            });


            // This function takes in a COLOR, and then creates a new marker
            // icon of that color. The icon will be 21 px wide by 34 high, have an origin
            // of 0, 0 and be anchored at 10, 34).
            function makeMarkerIcon(markerColor) {
                var markerImage = new google.maps.MarkerImage(
                    'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|' +
                    markerColor +
                    '|40|_|%E2%80%A2',
                    new google.maps.Size(21, 34),
                    new google.maps.Point(0, 0),
                    new google.maps.Point(10, 34),
                    new google.maps.Size(21, 34));
                return markerImage;
            }

            var defaultIcon = makeMarkerIcon('0091ff');
           // var i = 0;
        // Adds a marker to the map and push to the array.****************************************************************
            function addMarker(location, i, elementOfResponse) {
                var color
                if (elementOfResponse!=null)
                   color = elementOfResponse.address.markerColor;
                else
                    color = "#000000";
          //console.log("location=" + location);
          var largeInfowindow = new google.maps.InfoWindow();

          var NewMarker = new google.maps.Marker
              ({
                position: location,
                map: map,
                //icon: defaultIcon,
                icon: 
                    {
                        path: google.maps.SymbolPath.CIRCLE,
                        scale: 8.5,
                        fillColor: color,
                        fillOpacity: 0.4,
                        strokeWeight: 0.4
                    },
                //animation: google.maps.Animation.DROP,
                //title: i,
                //id: i
              });

            
            markers.push(NewMarker);
            NewMarker.addListener('click', function () { populateInfoWindow(this, largeInfowindow, elementOfResponse); });
            NewMarker.addListener('mouseover', function () {
                this.setIcon({
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 10,
                    fillColor: color,
                    fillOpacity: 1,
                    strokeWeight: 0.4
                });
            });
            NewMarker.addListener('mouseout', function () {
                this.setIcon({
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 8.5,
                    fillColor: color,
                    fillOpacity: 0.4,
                    strokeWeight: 0.4
                });
            });

            }

            // This function populates the infowindow when the marker is clicked. We'll only allow
            // one infowindow which will open at the marker that is clicked, and populate based
            // on that markers position.
            function populateInfoWindow(marker, infowindow, elementOfResponse)
            {
                // Check to make sure the infowindow is not already opened on this marker.
                if (infowindow.marker != marker) {
                    // Clear the infowindow content to give the streetview time to load.
                    infowindow.setContent('');
                    infowindow.marker = marker;
                    // Make sure the marker property is cleared if the infowindow is closed.
                    infowindow.addListener('closeclick', function () {
                        infowindow.marker = null;
                    });
                   
                    infowindow.setContent('<div>' +"*Nom et Prenom: "+ elementOfResponse.first_name  +" "+ elementOfResponse.last_name+ '</div>' +
                                          '<div id="id">' + "*Id: " + elementOfResponse.id + '</div>' +
                                          '<div id="adresse">' + "*Adresse: " + elementOfResponse.address.addressLine1 + ', ' + elementOfResponse.address.addressLine2 + ', ' + elementOfResponse.address.city + ', ' + elementOfResponse.address.state + ', ' + elementOfResponse.address.zipCode + ', ' + elementOfResponse.address.country + '</div>' +
                                          '<div id="latlng">' + "*Latitude: " + elementOfResponse.address.lat + ", *Langitude: " +elementOfResponse.address.lng + '</div>' +
                                          '<div id="login">' + "*Email: " + elementOfResponse.email + ", *Login: " + elementOfResponse.login + '</div>'
                                          );

                 
                    }

                    // Open the infowindow on the correct marker.
                    infowindow.open(map, marker);
           }
            


        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
            setMapOnAll(null);
        }

        // Shows any markers currently in the array.
        function showMarkers() {
            setMapOnAll(map);
        }

        // Deletes all markers in the array by removing references to them.
        function deleteMarkers() {
            clearMarkers();
            markers = [];
        }
            //****************centroids
        function sortFunc(a, b) {
            var bearA = google.maps.geometry.spherical.computeHeading(centerPt, a);
            var bearB = google.maps.geometry.spherical.computeHeading(centerPt, b);
            //console.log(bearA + ":" + bearB);
            return (bearA - bearB);
        }
            //************************
        (function () {
            "use strict";

            var category = 'google.maps.Polygon.getCentroid';
            // check that the GMaps API was already loaded
            if (null == google || null == google.maps || null == google.maps.Polygon) {
                console.error(category, 'Google Maps API not found');
                return;
            }

            
            function getCentroid(path) {
                var self = this,
                    vertexes;

                if (!self instanceof google.maps.Polygon)
                    return;

                if (null === path)
                    throw new Error('Path is optional, but cannot be null');

                // default to the first path
                if (arguments.length === 0)
                    path = self.getPath();

                // support for passing an index number to a path
                if (typeof (path) === 'number')
                    path = self.getPaths().getAt(path);

                if ((!(path instanceof Array)) && (!(path instanceof google.maps.MVCArray)))
                    throw new Error('Path must be an Array or MVCArray');

                if (path instanceof google.maps.MVCArray)
                    vertexes = path.getArray();

                vertexes = closeVertexes(vertexes);

                return calculate(vertexes);
            }

           
            function getCentroids() {
                var self = this,
                    centroids = [];

                if (!self instanceof google.maps.Polygon)
                    return;

                self.getPaths().forEach(function (path) {
                    centroids.push(self.getCentroid(path));
                });

                return centroids;
            }


            // ensures that vertex of point N is the same as point 0 in a polygon
            // this is necessary since the Google Maps API v3 will implicitly connect the
            // last and first vertex
            function closeVertexes(vertexes) {
                // HACK: clone the array via Array#splice
                var result = vertexes.slice(0),
                    length = result.length;

                if (!result[0].equals(result[length - 1])) {
                    result.push(result[0]);
                }

                return result;
            }

            
            function calculate(vertexes) {
                var coefficient,
                    crossProduct,
                    area = 0,
                    x = 0, // centroid longitude
                    y = 0, // centroid latitude
                    x1,
                    x2,
                    y1,
                    y2;

                // nothing to do if we are passed null, or an array with fewer than 4 points
                // 4 points are needed to define a triangle, since the first and last point must be the same
                // anything smaller than 4 points is just a line segment, a single point, or null
                if (vertexes == null || vertexes.length < 4)
                    return;

                // HACK: initialize the lat2/lng2 variables so that we can avoid calling the 
                // lat/lng properties twice for each vertex inside the loop
                y2 = vertexes[0].lat();
                x2 = vertexes[0].lng();

                // could use Array#reduce here, but, a simple for loop seems to make more
                // sense; a for loop lets us process the centroid X and centroid Y in one pass
                for (var i = 0, length = vertexes.length - 1; i < length; i++) {
                    y1 = y2;
                    x1 = x2;
                    y2 = vertexes[i + 1].lat();
                    x2 = vertexes[i + 1].lng();

                    // the crossProduct is a common value to both the X and Y calculations
                    crossProduct = (x1 * y2) - (x2 * y1);
                    area += crossProduct;
                    x += (x1 + x2) * crossProduct;
                    y += (y1 + y2) * crossProduct;
                }

                area *= 0.5;
                // calculate 1 / 6A where A is the signed area
                coefficient = 1 / (6 * area);

                x *= coefficient;
                y *= coefficient;

                return new google.maps.LatLng(y, x);
            }

            if (typeof (google.maps.Polygon.prototype.getCentroid) !== 'function') {
                google.maps.Polygon.prototype.getCentroid = getCentroid;
            }

            if (typeof (google.maps.Polygon.prototype.getCentroids) !== 'function') {
                google.maps.Polygon.prototype.getCentroids = getCentroids;
            }
        })();

            //**************************************************************************MARKERS
       
        var i = 0;
        var polygons = [];
        var arr = new Array();
        var centroidsMarkersArray = new Array();
        $("#clusterNumber_input").keyup(function () {
            var x = $("#clusterNumber_input").val();
            var y = $("#typeAlgorithme").val();
            if (x == null ||x==0||x==1)
                x = 3;
            var vwidth = $("#vwidth").val();
            var vheight = $("#vheight").val();

            console.log("Ajax************************************************************************************************************");
            $.ajax({
                url: "http://localhost:4054/User/GetUserList",
                type: "GET",
                dataType: "json",
                data: { 'clusterNumber': x, 'typeAlgo': y, 'vwidth': vwidth, 'vheight': vheight },
                success: function (response) {

                    
                    deleteMarkers();
                    centroidsMarkersArray = [];
                    directionsDisplay.setMap(null);
                    directionsDisplay = new google.maps.DirectionsRenderer;
                    directionsDisplay.setMap(map);

                    var listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty = _.groupBy(response, function (currentObject) {
                        return currentObject.address.markerColor;
                    });

                   
                    console.log("avant set polygon null");
                    for (var polygon in polygons) {
                        console.log("polygon=" + polygon);
                        polygons[polygon].setMap(null);
                    }

                    i = 0;


                    for (var color in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) {
                        console.log(color);
                        arr = [];
                        var bounds = new google.maps.LatLngBounds();

                        if (listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color] != null)
                            for (var employee in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])// employee=0 , 1 .... keys correspending to the objects of type employee(Admin)
                            {

                                if ((((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"]) != null) {
                                    var lat = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lat"];
                                    var lng = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lng"];
                                    var location = new google.maps.LatLng(lat, lng);
                                    addMarker(location, i, ((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee]));
                                    arr.push(location);
                                    bounds.extend(location);
                                    console.log("LatLng=" + lat + "/" + lng);
                                    i++;

                                }



                            }
                        centerPt = bounds.getCenter();
                        var centerPtMarker = new google.maps.Marker
                                      ({
                                          position: centerPt,
                                          map: map,
                                      });
                        markers.push(centerPtMarker);

                        centroidsMarkersArray.push({
                            location: centerPt,
                            stopover: true
                        });

                       

                        arr = arr.sort(sortFunc);
                        polygons.push(new google.maps.Polygon({
                            paths: arr,
                            strokeColor: color,
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.35
                        }));


                        

                        
                        //polygons[polygons.length - 1].getCentroids().forEach(function (centroid) { //with this dont show center of 2 points
                        //    var centerPtMarker = new google.maps.Marker({
                        //        position: centroid,
                        //        map: map
                        //    });
                        //    markers.push(centerPtMarker);

                        //    if (centroid!=null)
                        //    centroidsMarkersArray.push({
                        //        location: centroid,
                        //        stopover: true
                        //    });

                        //});

                       

                        polygons[polygons.length - 1].setMap(map);

                        //centerPt = getCenterOfPolygon(polygons[polygons.length - 1]);
                        //var centerPtMarker = new google.maps.Marker
                        //              ({
                        //                  position: centerPt,
                        //                  map: map,
                        //              });
                        //markers.push(centerPtMarker);

                        //map.fitBounds(bounds);

                    }

                    if ($("#pathOnOff").is(":checked")) {
                        directionsService.route({
                            origin: new google.maps.LatLng(36.897335, 10.1903807),
                            destination: new google.maps.LatLng(36.628318895330345, 10.1699406215414),
                            waypoints: centroidsMarkersArray,
                            optimizeWaypoints: true,
                            travelMode: 'DRIVING'
                        }, function (response, status) {
                            if (status === 'OK') {
                                directionsDisplay.setDirections(response);
                                var route = response.routes[0];
                                var summaryPanel = document.getElementById('directions-panel');
                                summaryPanel.innerHTML = '';
                                // For each route, display summary information.
                                for (var i = 0; i < route.legs.length; i++) {
                                    var routeSegment = i + 1;
                                    summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                                        '</b><br>';
                                    summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                                    summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                                    summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                                }
                            } else {
                                window.alert('Directions request failed due to ' + status);
                            }
                        });
                    }


                }, error: function (response) {
                    alert("Erreur lors lecture nombre email initial");
                },
                complete: function () {

                }
            });
        });

        $("#typeAlgorithme").change(function () {
            var x = $("#clusterNumber_input").val();
            var y = $("#typeAlgorithme").val();
            if (x == null || x == 0 || x == 1)
                x = 3;
            var vwidth = $("#vwidth").val();
            var vheight = $("#vheight").val();

         
                

            console.log("Ajax************************************************************************************************************");
            $.ajax({
                url: "http://localhost:4054/User/GetUserList",
                type: "GET",
                dataType: "json",
                data: { 'clusterNumber': x, 'typeAlgo': y, 'vwidth': vwidth, 'vheight': vheight },
                success: function (response) {


                    deleteMarkers();
                    centroidsMarkersArray = [];
                    directionsDisplay.setMap(null);
                    directionsDisplay = new google.maps.DirectionsRenderer;
                    directionsDisplay.setMap(map);

                    var listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty = _.groupBy(response, function (currentObject) {
                        return currentObject.address.markerColor;
                    });


                    console.log("avant set polygon null");
                    for (var polygon in polygons) {
                        console.log("polygon=" + polygon);
                        polygons[polygon].setMap(null);
                    }

                    i = 0;


                    for (var color in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) {
                        console.log(color);
                        arr = [];
                        var bounds = new google.maps.LatLngBounds();

                        if (listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color] != null)
                            for (var employee in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])// employee=0 , 1 .... keys correspending to the objects of type employee(Admin)
                            {

                                if ((((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"]) != null) {
                                    var lat = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lat"];
                                    var lng = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lng"];
                                    var location = new google.maps.LatLng(lat, lng);
                                    addMarker(location, i, ((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee]));
                                    arr.push(location);
                                    bounds.extend(location);
                                    console.log("LatLng=" + lat + "/" + lng);
                                    i++;

                                }



                            }
                        centerPt = bounds.getCenter();
                        var centerPtMarker = new google.maps.Marker
                                      ({
                                          position: centerPt,
                                          map: map,
                                      });
                        markers.push(centerPtMarker);

                        centroidsMarkersArray.push({
                            location: centerPt,
                            stopover: true
                        });

                        

                        arr = arr.sort(sortFunc);
                        polygons.push(new google.maps.Polygon({
                            paths: arr,
                            strokeColor: color,
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.35
                        }));





                        //polygons[polygons.length - 1].getCentroids().forEach(function (centroid) {
                        //    var centerPtMarker = new google.maps.Marker({
                        //        position: centroid,
                        //        map: map
                        //    });
                        //    markers.push(centerPtMarker);

                        //    centroidsMarkersArray.push({
                        //        location: centroid,
                        //        stopover: true
                        //    });
                        //});



                        polygons[polygons.length - 1].setMap(map);

                        //centerPt = getCenterOfPolygon(polygons[polygons.length - 1]);
                        //var centerPtMarker = new google.maps.Marker
                        //              ({
                        //                  position: centerPt,
                        //                  map: map,
                        //              });
                        //markers.push(centerPtMarker);

                        //map.fitBounds(bounds);

                    }

                    if ($("#pathOnOff").is(":checked")) {
                    directionsService.route({
                        origin: new google.maps.LatLng(36.897335, 10.1903807),
                        destination: new google.maps.LatLng(36.628318895330345, 10.1699406215414),
                        waypoints: centroidsMarkersArray,
                        optimizeWaypoints: true,
                        travelMode: 'DRIVING'
                    }, function (response, status) {
                        if (status === 'OK') {
                            directionsDisplay.setDirections(response);
                            var route = response.routes[0];
                            var summaryPanel = document.getElementById('directions-panel');
                            summaryPanel.innerHTML = '';
                            // For each route, display summary information.
                            for (var i = 0; i < route.legs.length; i++) {
                                var routeSegment = i + 1;
                                summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                                    '</b><br>';
                                summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                                summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                                summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                            }
                        } else {
                            window.alert('Directions request failed due to ' + status);
                        }
                    });
                    }


                }, error: function (response) {
                    alert("Erreur lors lecture nombre email initial");
                },
                complete: function () {

                }
            });
        });

















            //*************************************************

        $(document).ready(





            function myPeriodicMethod() {



                function showImage() {
                    var id = '#dialog';

                    var fullImagePath = "http://localhost:18080/gestion-resources-humaine-web/uploads/Plot.png?" + new Date().getTime();




                    $('.image').attr({
                        'src': fullImagePath
                    });

                    //if close button is clicked
                    $('.window .close').click(function (e) {
                        //Cancel the link behavior
                        e.preventDefault();

                        $('#mask').removeClass('showing');
                    });

                };

                $(".showImage").on("click", function () {
                   
                    $('#mask').addClass('showing');
                    myPeriodicMethod();
                   


                });
            $("#pathOnOff").change(function () {myPeriodicMethod();});
            console.log("******************************on ready document(myPeriodicMethod) function executed");
            var x = $("#clusterNumber_input").val();
            if(x==0)
            {
                x = 20;
                $("#clusterNumber_input").val(x);
            }
            var y = $("#typeAlgorithme").val();
            var vwidth = $("#vwidth").val();
            var vheight = $("#vheight").val();

            $.ajax({
                url: "http://localhost:4054/User/GetUserList",
                type: "GET",
                dataType: "json",
                data: { 'clusterNumber': x, 'typeAlgo': y, 'vwidth': vwidth, 'vheight': vheight },
                success: function (response) {

                    //console.log(response);
                    deleteMarkers();
                    centroidsMarkersArray = [];
                    directionsDisplay.setMap(null);
                    directionsDisplay = new google.maps.DirectionsRenderer;
                    directionsDisplay.setMap(map);


                    //for (var i = 0; i < response.length; i++) {
                    //    //Get the position from the location array.
                    //    if (response[i].address != null) {
                    //        var lat = response[i].address.lat;
                    //        var lng = response[i].address.lng;
                    //        //console.log("lat=" + lat);
                    //        var location = new google.maps.LatLng(lat, lng);
                            
                    //        addMarker(location, i, response[i]);
                           


                    //}
                    //}

                    ////var flags = {};
                    ////var newPlaces = response.filter(function (entry) {
                    ////    if (flags[entry.address.markerColor]) {
                    ////        return false;
                    ////    }
                    ////    flags[entry.address.markerColor] = true;
                    ////    return true;
                    ////});

                   

                    var listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty = _.groupBy(response, function (currentObject) {
                        return currentObject.address.markerColor;
                    });

                    //console.log(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty);


                    //for (var element in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) //affiche #00ff00 #ff0000 #0000ff
                    //{
                    //    console.log(element);
                    //}

                    console.log("avant set polygon null");
                    for (var polygon in polygons) {
                        console.log("polygon=" + polygon);
                        polygons[polygon].setMap(null);
                    }

                    i = 0;
                    

                    //for (var element in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) //affiche les 3 tableau des 3 couleurs
                    //{
                    //    console.log(listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[element]);
                    //}

                    for (var color in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty) 
                    {
                        console.log(color);
                        arr = [];
                        var bounds = new google.maps.LatLngBounds();

                        if (listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color]!=null)
                        for (var employee in listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])// employee=0 , 1 .... keys correspending to the objects of type employee(Admin)
                        {

                            if ((((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])!=null)
                            {
                                var lat = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lat"];
                                var lng = (((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee])["address"])["lng"];
                                var location = new google.maps.LatLng(lat, lng);
                                addMarker(location, i, ((listOfArrayOfAdminsSeperatedByMarkerColorInAdressProperty[color])[employee]));
                                arr.push(location);
                                bounds.extend(location);
                                console.log("LatLng=" + lat + "/" + lng);
                                i++;

                            }
                           


                        }
                        centerPt = bounds.getCenter();
                        var centerPtMarker = new google.maps.Marker
                                      ({
                                          position: centerPt,
                                          map: map,
                                      });
                        markers.push(centerPtMarker);

                        centroidsMarkersArray.push({
                            location: centerPt,
                            stopover: true
                        });


                        arr = arr.sort(sortFunc);
                        polygons.push(new google.maps.Polygon({
                            paths: arr,
                            strokeColor: color,
                            strokeOpacity: 0.8,
                            strokeWeight: 2,
                            fillColor: color,
                            fillOpacity: 0.35
                        }));
                        polygons[polygons.length - 1].setMap(map);
                        
                        //map.fitBounds(bounds);
                       
                    }
                    //centroidsMarkersArray.push({
                    //    location: new google.maps.LatLng(36.8271767, 10.14590069999997),
                    //        stopover: true
                    //});
                    //centroidsMarkersArray.push({
                    //    location: new google.maps.LatLng(36.8024303, 10.112447900000006),
                    //    stopover: true
                    //});

                    if ($("#pathOnOff").is(":checked")) {
                        directionsService.route({
                            origin: new google.maps.LatLng(36.897335, 10.1903807),
                            destination: new google.maps.LatLng(36.628318895330345, 10.1699406215414),
                            waypoints: centroidsMarkersArray,
                            optimizeWaypoints: true,
                            travelMode: 'DRIVING'
                        }, function (response, status) {
                            if (status === 'OK') {
                                directionsDisplay.setDirections(response);
                                var route = response.routes[0];
                                var summaryPanel = document.getElementById('directions-panel');
                                summaryPanel.innerHTML = '';
                                // For each route, display summary information.
                                for (var i = 0; i < route.legs.length; i++) {
                                    var routeSegment = i + 1;
                                    summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                                        '</b><br>';
                                    summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                                    summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                                    summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                                }
                            } else {
                                window.alert('Directions request failed due to ' + status);
                            }
                        });
                    }

                    

                },
                error: function (response) {
                    alert("Erreur lors lecture nombre email initial" );
                },
                complete: function (response) {
                    showImage();

                }
            });
        });





            google.maps.event.addListener(map, 'click', function (e) {
                var data = JSON.stringify({ 'Lat': e.latLng.lat(), 'Lng': e.latLng.lng() });
                var latitude = e.latLng.lat();
                var longitude = e.latLng.lng();
                $.ajax({
                    type: "POST",
                    url: "/User/GoogleMapLngLatJsonPost",
                    data: data,
                    contentType: 'application/json',
                    success: function (data) {
                        var geocoder = geocoder = new google.maps.Geocoder();
                        geocoder.geocode({ 'latLng': e.latLng }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[0]) {



                                    var address = results[0].formatted_address;
                                    var pin = results[0].address_components[results[0].address_components.length - 1].long_name;
                                    var country = results[0].address_components[results[0].address_components.length - 2].long_name;
                                    var state = results[0].address_components[results[0].address_components.length - 3].long_name;
                                    var city = results[0].address_components[results[0].address_components.length - 4].long_name;
                                    var street=extractFromAdress(results[0].address_components, "route");
                                    var house_number = extractFromAdress(results[0].address_components, "street_number");

                                    document.getElementById('lat').value = results[0].geometry.location.lat();
                                    document.getElementById('lng').value = results[0].geometry.location.lng();

                                    document.getElementById('house_number').value = house_number;
                                    document.getElementById('street').value = street;
                                    document.getElementById('country').value = country;
                                    document.getElementById('state').value = state;
                                    document.getElementById('city').value = city;
                                    document.getElementById('zipCode').value = pin;
                                }
                            }
                        });
                    }
                });

            });
        }


        

</script>