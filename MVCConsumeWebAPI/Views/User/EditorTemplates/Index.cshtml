@model IEnumerable<MVCConsumeWebAPI.Models.AdministratorRead>

@{
    ViewBag.Title = "Index";
}




@(Html.Kendo().Grid<MVCConsumeWebAPI.Models.AdministratorRead>()
    .Name("grid")
    .Columns(columns =>
    {
    columns.Bound(e => e.id).Width(40).Title("ID");
    columns.Bound(e => e.role).Width(120).Title("Role");
    columns.Bound(e => e.email).Width(180).Title("Email");
    columns.Bound(e => e.login).Width(120).Title("Login");
    columns.Bound(e => e.registration_date).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de creation du compte").Width(200);
    columns.Bound(e => e.status).Width(120).ClientTemplate("#=templateFunction(status)#").Title("Etat");


    columns.Template(@<text></text>).ClientTemplate(
"<a class='btn btn-info glyphicon glyphicon-trash' href='" + Url.Action("Details", "User") + "/#= id #'" + "><i class='ti-settings m-r-5 m-l-5'></i> Detail </a>" +
"<a class='btn btn-success glyphicon glyphicon-pencil' href='" + Url.Action("Edit", "User") + "/#= id #'" + "> <i class='ti-settings m-r-5 m-l-5'></i> Modifier</a>" +
        //"<a class='btn btn-danger glyphicon glyphicon-trash' href='" + Url.Action("Delete", "User") + "/#= id #'" + "><i class='ti-settings m-r-5 m-l-5'></i> Supprimer </a>" +



        //@Html.ActionLink("Modifier", "Edit", new { id = "#= id #" }) +
        //@Html.ActionLink("Details", "Details", new { id = "#= id #" }) +
        @Ajax.ActionLink(" Supprimer", "Delete", new { id = "#= id #" }, new AjaxOptions { Confirm = "Are you sure you want to delete this entry?", HttpMethod = "DELETE", OnSuccess = "RemoveRow" }, new { @class = "btn btn-danger glyphicon glyphicon-trash" })

).Title("Action").Width(320);

        //  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);



    })
    //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditPopUp"))
    .Sortable()
    .Pageable()
    .Scrollable()
    .ClientDetailTemplateId("template")
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Read(read => read.Action("UserListe", "User"))
        .Model(model => model.Id(p => p.id))
        .Update(update => update.Action("EditUser", "User"))
        .Destroy(destroy => destroy.Action("DeleteUser", "User"))


    )
    .Events(events => events.DataBound("dataBound"))
)
<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=id#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Log de connexion").Content(@<text>
        @(Html.Kendo().Grid<MVCConsumeWebAPI.Models.User_log>()
                        .Name("grid_#=id#") // template expression, to be evaluated in the master context
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.id).Title("ID").Width(40);
                            columns.Bound(o => o.country).Title("Pay").Width(100);
                            columns.Bound(o => o.ip_address).Width(150).Title("IP Adresse");
                            columns.Bound(o => o.login_timestamp).Width(160).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de connexion"); // escaped template expression, to be evaluated in the child/detail context
                            columns.Bound(o => o.logout_timestamp).Width(160).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Date de déconnexion");
                            columns.Bound(o => o.pc_id).Width(150).Title("ID PC");
                            columns.Bound(o => o.session_id).Width(300).Title("SessionID");
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Read(read => read.Action("User_logsBinding", "User", new { id = "#=id#" }))
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
                </text>
                );
                items.Add().Text("Informations utilisateur").Content(
    "<div class='employee-details'>" +
        "<ul>" +
            "<li><label>Nom:</label>#= first_name #</li>" +
            "<li><label>Prenom:</label>#= last_name #</li>" +
            "<li><label>CIN:</label>#= cin #</li>" +
            "<li><label>Tel:</label>#= phone_number #</li>" +
             "<li><label>Pay:</label>#= address!=null ? address.addressLine1 +', '+ address.addressLine2+', '+ address.city+', '+ address.state+', '+ address.zipCode+', '+ address.country :'' #</li>" +
        "</ul>" +
    "</div>"
);
            })
            .ToClientTemplate())
</script>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>

<style>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>

@section scripts{ @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")}
<script type="text/javascript">
    function RemoveRow() {
        var $tr = $(this).closest('tr');
        $tr.remove();
    }

    function templateFunction(item) {


        if(item=="pending")        
            return "<span class='label label-info'>En attente</span>";
        if(item=="active")
            return  "<span class='label label-success'>Activé</span>";
        if(item=="blocked")
            return  "<span class='label label-danger'>Bloqué</span>";
        
        return item;
    }
</script>